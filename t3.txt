** This testcase demonstrates correctness of module structure with declaration and simple statements**
declare module square;
<<module compute>>
takes input [x:array[a..b] of real,y:integer];
returns [value:real];
start
	value:= x[1]*x[1];
end


<<<driver program>>>
start
	declare v1,v3,v_1_2_3:integer;
	declare v2,v4:real;
	v2:=0.4;
	declare A:array[2..14] of real;
	v4:=A[12]*v4;
	get_value(v_1_2_3);
	declare result_:real;
	[result_]:=use module compute with parameters A,v1;
	print(result_);
end


**


notice that this test case does not declare the module before the driver module, still it is syntactically correct as moduleDeclarations is optional. Testing whether a module is declared before its use is a matter of semantic analysis**

** test the correctness of all lexemes and parse tree created
and print the following message on successful compilation on the console
      " Input source code is syntactically correct.........."
**

**make sure to produce only relevant output of your compiler code...
Also remove all unnecessary printf statements and make the code more professional before submitting**
