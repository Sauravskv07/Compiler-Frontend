** This testcase demonstrates correctness of module structure with declaration and simple statements**
<<<<<<< Updated upstream
declare module square;
<<module compute>>
takes input [x:array[a..b] of real,y:integer];
returns [value:real];
start
	value:= x[1]*x[1];
=======
**declare module square;**
<<module compute>>
takes input [x:integer,y:integer];
returns [value:integer,f:integer];
start
	declare v1:integer;
	v1:=v1*f;
	**value:= x*x;
	declare v1:integer;
	v1:=v1*v1;**
	**while(v1<v1)
	start
		declare v3:integer;
	end
	for(v1 in  1..15)
	start
		declare v3:integer;
		v1:=v1+1;
	end
	switch(v1)
		start
			case 5: declare v3:integer;
				   break;
			case 1: declare v4:integer;
				    break;
			default: declare v7:integer;
				    break;
		end**
>>>>>>> Stashed changes
end


<<<driver program>>>
start
	declare v1,v3,v_1_2_3:integer;
	declare v2,v4:real;
	declare x1:boolean;
	declare A:array[2..14] of real;
	v4:=+((5.0));
	**v2:=-(4 + 3*5);
	v2:=+v2;
	v2:=+A[v2];**
	**x1:= (x1<=x1) OR x1 AND x1;
	v2:=+((5));
	v4:=A[12]*v4;
	A[5]:=v4*(22 + v1)*2 + 66 + A[2];
	get_value(v_1_2_3);
<<<<<<< Updated upstream
	declare result_:real;
	[result_]:=use module compute with parameters A,v1;
=======
	declare result_:integer;
	[result_,v1]:=use module square with parameters v1,v3;
>>>>>>> Stashed changes
	print(result_);
	print(A[v1]);
	print(true);**
	print(5);
	
end


**


notice that this test case does not declare the module before the driver module, still it is syntactically correct as moduleDeclarations is optional. Testing whether a module is declared before its use is a matter of semantic analysis**

** test the correctness of all lexemes and parse tree created
and print the following message on successful compilation on the console
      " Input source code is syntactically correct.........."
**

**make sure to produce only relevant output of your compiler code...
Also remove all unnecessary printf statements and make the code more professional before submitting**
