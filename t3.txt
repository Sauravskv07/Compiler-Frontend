** This testcase demonstrates correctness of module structure with declaration and simple statements**
declare module square;
<<module compute>>
takes input [x:integer,y:integer];
returns [value:integer,f:integer];
start
	declare v1:integer;
	declare v5:boolean;
	v1:=v1*f;
	f:=1;
	value:= x*x + 5;
	v1:=v1*v1;
	while(v1>x)
	start
		declare v3:integer;
	end
	for(v1 in  1..15)
	start
		declare v3:integer;
		x:=x+1;
	end
	switch(v5)
		start
			case true: declare v3:integer;
				   break;
			case false: declare v4:integer;
				    break;
		end
end


<<<driver program>>>
start
	declare v1,v3,v_1_2_3:integer;
	declare v2,v4:real;
	declare x1:boolean;
	declare A,B:array[2..14] of real;
	v4:=+((5.0));
	v2:=+v2;
	A:=B;
	v2:=+A[v1];
	x1:= (v1<=v1) OR x1;
	v2:=+5.0;
	v4:=A[12]*v4;
	A[v1]:=A[2];
	get_value(v_1_2_3);
	declare result_:integer;
	[result_,v1]:=use module compute with parameters v1,v3;
	print(result_);
	print(A[v1]);
	print(true);
	print(5);
	print(A);
	
end


**
notice that this test case does not declare the module before the driver module, still it is syntactically correct as moduleDeclarations is optional. Testing whether a module is declared before its use is a matter of semantic analysis**

** test the correctness of all lexemes and parse tree created
and print the following message on successful compilation on the console
      " Input source code is syntactically correct.........."
**

**make sure to produce only relevant output of your compiler code...
Also remove all unnecessary printf statements and make the code more professional before submitting**
